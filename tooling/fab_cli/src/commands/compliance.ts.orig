#!/usr/bin/env node
import { Command } from 'commander';
import fs from 'fs';
import path from 'path';

const program = new Command();

type Profile = {
    name: string;
    clauses: string[];  // e.g. ["privacy anonymized", "energy_budget 10J per_event", ...]
};

/**
 * Load a compliance profile, extracting its policy block clauses.
 */
function loadProfile(profileName: string): Profile {
    const profilePath = path.resolve(
        __dirname,
        '..',
        '..',
        'compliance',
        `${profileName}.profile`
    );
    if (!fs.existsSync(profilePath)) {
        throw new Error(`Profile not found: ${profileName}`);
    }

    const content = fs.readFileSync(profilePath, 'utf8');
    const policyMatch = content.match(/policy\s*\{\s*([\s\S]*?)\s*\}/m);
    if (!policyMatch) {
        throw new Error(`No policy { ‚Ä¶ } block found in ${profileName}.profile`);
    }

    // Split on commas at top level (not inside parentheses)
    const body = policyMatch[1]
        .replace(/\r\n/g, '\n')      // normalize line endings
        .split('\n')
        .join(' ')                   // collapse lines
        .trim();

    // now split by commas not inside parentheses
    const clauses = body
        .split(/,(?![^(]*\))/g)
        .map(s => s.trim())
        .filter(s => s.length > 0);

    return { name: profileName, clauses };
}

/**
 * Extract the first top-level policy { ‚Ä¶ } block from the .fab source.
 */
function extractModulePolicy(source: string): string {
    const policyMatch = source.match(/^\s*policy\s*\{\s*([\s\S]*?)^\s*\}/m);
    if (!policyMatch) {
        throw new Error('No top-level policy { ‚Ä¶ } block found in module');
    }
    // Collapse whitespace and newlines for easy substring matching
    return policyMatch[1].replace(/\r\n/g, '\n').split('\n').join(' ').trim();
}

program
    .name('fab compliance')
    .description('Run a compliance profile check on a Fabric .fab module')
    .argument('<module>', 'Path to the .fab module file')
    .option(
        '-p, --profile <profile>',
        'Compliance profile name (GDPR, CCPA, HIPAA)',
        'GDPR'
    )
    .action((modulePath: string, options: { profile: string }) => {
        try {
            // Resolve module file
            const absPath = path.resolve(process.cwd(), modulePath);
            if (!fs.existsSync(absPath)) {
                console.error(`‚ùå Module file not found: ${absPath}`);
                process.exit(1);
            }

            // Load profile
            const profile = loadProfile(options.profile);
            console.log(`‚úÖ Loaded profile: ${profile.name}`);

            // Read source and extract its global policy block
            const source = fs.readFileSync(absPath, 'utf8');
            const modPolicyBody = extractModulePolicy(source);

            // Check each clause
            const missing: string[] = [];
            for (const clause of profile.clauses) {
                if (!modPolicyBody.includes(clause)) {
                    missing.push(clause);
                }
            }

            if (missing.length) {
                console.error('‚ùå Compliance violation: the following clauses are missing:');
                for (const c of missing) console.error(`  ‚Ä¢ ${c}`);
                process.exit(1);
            }

            console.log('üéâ Compliance check passed: all profile clauses are present.');
        } catch (err: any) {
            console.error(`‚ùå Compliance check failed: ${err.message}`);
            process.exit(1);
        }
    });

program.parse(process.argv);

