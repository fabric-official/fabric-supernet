// SuperNet Backboard - Main Operations Dashboard
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Shield, Wifi, HardDrive, Settings, Activity, FileText } from 'lucide-react';
import { FabricPluginHost, SiteConfig } from '@/types/plugin';
import { useToast } from '@/hooks/use-toast';
function readInit() {
  try {
    const siteId = localStorage.getItem("fabric:siteId") ?? "";
    const wallet = localStorage.getItem("fabric:orgWallet") ?? "";
    const initialized = localStorage.getItem("fabric:initialized") === "1";
    return { siteId, wallet, initialized: initialized || (!!siteId && !!wallet) };
  } catch { return { siteId: "", wallet: "", initialized: false }; }
}

interface SuperNetBackboardProps {
  host: FabricPluginHost;
}

export const SuperNetBackboard: React.FC<SuperNetBackboardProps> = ({ host }) => {
  const [siteConfig, setSiteConfig] = useState<SiteConfig | null>(null);
  const [isSetupComplete, setIsSetupComplete] = useState(() => readInit().initialized);
  const [setupForm, setSetupForm] = useState(() => { const i = readInit(); return { siteId: i.siteId, wallet: i.wallet }; });
  const { toast } = useToast();

  useEffect(() => {
    loadSiteConfig();
  }, []);

  const loadSiteConfig = async () => {
    try {
      const exists = await host.git.exists('site/site.json');
      if (exists) {
        const configData = await host.git.read('site/site.json');
        const config = JSON.parse(configData);
        setSiteConfig(config);
        localStorage.setItem("fabric:siteId", setupForm.siteId);
localStorage.setItem("fabric:orgWallet", setupForm.wallet);
localStorage.setItem("fabric:initialized", "1");
setIsSetupComplete(true);
      }
    } catch (error) {
      console.error('Failed to load site config:', error);
    }
  };

  const handleFirstTimeSetup = async () => {
    try {
      if (!setupForm.siteId || !setupForm.wallet) {
        toast({
          title: "Setup Error",
          description: "Please fill in all required fields",
          variant: "destructive"
        });
        return;
      }

      const newSiteConfig: SiteConfig = {
        siteId: setupForm.siteId,
        wallet: setupForm.wallet,
        pubkey: 'ed25519:generated-site-key',
        version: '1.0.0',
        setupAt: new Date().toISOString()
      };

      // Write site configuration
      await host.git.write('site/site.json', JSON.stringify(newSiteConfig, null, 2));
      
      // Commit and push
      await host.git.push('feat(site): initial site setup');

      // Emit setup delta
      await host.provenance.emit({
        type: 'SetupDelta',
        siteId: setupForm.siteId,
        payload: {
          siteVersion: '1.0.0',
          wallet: setupForm.wallet
        }
      } as any);

      setSiteConfig(newSiteConfig);
      localStorage.setItem("fabric:siteId", setupForm.siteId);
localStorage.setItem("fabric:orgWallet", setupForm.wallet);
localStorage.setItem("fabric:initialized", "1");
setIsSetupComplete(true);

      toast({
        title: "Setup Complete",
        description: "Site configuration has been initialized successfully",
        variant: "default"
      });
    } catch (error) {
      console.error('Setup failed:', error);
      toast({
        title: "Setup Failed",
        description: error instanceof Error ? error.message : "Unknown error occurred",
        variant: "destructive"
      });
    }
  };

  if (!isSetupComplete) {
    return (
      <div className="min-h-screen bg-background p-6">
        <div className="max-w-2xl mx-auto">
          <Card className="border-border shadow-soft">
            <CardHeader className="text-center">
              <CardTitle className="text-2xl font-bold text-foreground">
                Fabric Dashboard Setup
              </CardTitle>
              <p className="text-muted-foreground">
                Initialize your SuperNet Backboard for the first time
              </p>
            </CardHeader>
            <CardContent className="space-y-6">
              <Alert className="border-primary/20 bg-primary/5">
                <Shield className="h-4 w-4 text-primary" />
                <AlertDescription className="text-foreground">
                  This setup will create your site's identity and initialize Git-backed state management.
                  All operations are cryptographically signed and stored locally.
                </AlertDescription>
              </Alert>

              <div className="space-y-4">
                <div>
                  <Label htmlFor="siteId" className="text-foreground font-medium">Site ID</Label>
                  <Input
                    id="siteId"
                    value={setupForm.siteId}
                    onChange={(e) => setSetupForm(prev => ({ ...prev, siteId: e.target.value }))}
                    placeholder="e.g., fabric-site-001"
                    className="bg-background border-border"
                  />
                </div>
                
                <div>
                  <Label htmlFor="wallet" className="text-foreground font-medium">Organization Wallet</Label>
                  <Input
                    id="wallet"
                    value={setupForm.wallet}
                    onChange={(e) => setSetupForm(prev => ({ ...prev, wallet: e.target.value }))}
                    placeholder="e.g., fabric-org-wallet-address"
                    className="bg-background border-border"
                  />
                </div>
              </div>

              <Button 
                onClick={handleFirstTimeSetup}
                className="w-full bg-gradient-primary text-primary-foreground hover:opacity-90"
                size="lg"
              >
                <Shield className="mr-2 h-4 w-4" />
                Initialize Fabric Site
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-foreground">SuperNet Backboard</h1>
            <p className="text-muted-foreground">Operations console for {siteConfig?.siteId}</p>
          </div>
          <Badge variant="outline" className="border-secure text-secure">
            <Shield className="mr-1 h-3 w-3" />
            Secure
          </Badge>
        </div>

        {/* Quick Status Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card className="border-border shadow-soft">
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <Wifi className="h-5 w-5 text-primary" />
                <div>
                  <p className="text-sm font-medium text-foreground">Network</p>
                  <p className="text-xs text-muted-foreground">Connected</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-border shadow-soft">
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <HardDrive className="h-5 w-5 text-accent" />
                <div>
                  <p className="text-sm font-medium text-foreground">Devices</p>
                  <p className="text-xs text-muted-foreground">2 enrolled</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-border shadow-soft">
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <Shield className="h-5 w-5 text-secure" />
                <div>
                  <p className="text-sm font-medium text-foreground">Compliance</p>
                  <p className="text-xs text-muted-foreground">All clear</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-border shadow-soft">
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <Activity className="h-5 w-5 text-warning" />
                <div>
                  <p className="text-sm font-medium text-foreground">Activity</p>
                  <p className="text-xs text-muted-foreground">3 events today</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Operations Tabs */}
        <Tabs defaultValue="overview" className="space-y-4">
          <TabsList className="grid w-full grid-cols-6 bg-card border border-border">
            <TabsTrigger value="overview" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground">
              Overview
            </TabsTrigger>
            <TabsTrigger value="devices" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground">
              <HardDrive className="mr-1 h-3 w-3" />
              Devices
            </TabsTrigger>
            <TabsTrigger value="network" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground">
              <Wifi className="mr-1 h-3 w-3" />
              Network
            </TabsTrigger>
            <TabsTrigger value="compliance" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground">
              <Shield className="mr-1 h-3 w-3" />
              Policy
            </TabsTrigger>
            <TabsTrigger value="licenses" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground">
              <Settings className="mr-1 h-3 w-3" />
              Licenses
            </TabsTrigger>
            <TabsTrigger value="logs" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground">
              <FileText className="mr-1 h-3 w-3" />
              Audit
            </TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-4">
            <Card className="border-border shadow-soft">
              <CardHeader>
                <CardTitle className="text-foreground">Site Overview</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium text-muted-foreground">Site ID</Label>
                    <p className="text-foreground">{siteConfig?.siteId}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-muted-foreground">Wallet</Label>
                    <p className="text-foreground font-mono text-sm">{siteConfig?.wallet}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-muted-foreground">Version</Label>
                    <p className="text-foreground">{siteConfig?.version}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-muted-foreground">Public Key</Label>
                    <p className="text-foreground font-mono text-sm">{siteConfig?.pubkey}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Other tab content would be implemented in separate components */}
          <TabsContent value="devices">
            <div className="text-center py-8">
              <p className="text-muted-foreground">Device management interface would be here</p>
              <p className="text-sm text-muted-foreground mt-2">Navigate to dedicated device management page for full functionality</p>
            </div>
          </TabsContent>

          <TabsContent value="network">
            <div className="text-center py-8">
              <p className="text-muted-foreground">Network configuration interface would be here</p>
              <p className="text-sm text-muted-foreground mt-2">Navigate to dedicated network page for full functionality</p>
            </div>
          </TabsContent>

          <TabsContent value="compliance">
            <div className="text-center py-8">
              <p className="text-muted-foreground">Policy and compliance interface would be here</p>
              <p className="text-sm text-muted-foreground mt-2">Navigate to dedicated compliance page for full functionality</p>
            </div>
          </TabsContent>

          <TabsContent value="licenses">
            <div className="text-center py-8">
              <p className="text-muted-foreground">License management interface would be here</p>
              <p className="text-sm text-muted-foreground mt-2">Navigate to dedicated licenses page for full functionality</p>
            </div>
          </TabsContent>

          <TabsContent value="logs">
            <div className="text-center py-8">
              <p className="text-muted-foreground">Audit logs interface would be here</p>
              <p className="text-sm text-muted-foreground mt-2">Navigate to dedicated logs page for full functionality</p>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};


