import React, { useState, useEffect } from 'react';
import { Routes, Route } from 'react-router-dom';
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar";
import { FabricSidebar } from '@/components/FabricSidebar';
import { PluginManager } from '@/services/PluginManager';
import { SuperNetBackboard } from '@/plugins/supernet-backboard/SuperNetBackboard';
import { OpsDevices } from '@/plugins/supernet-backboard/OpsDevices';
import { OpsNetwork } from '@/plugins/supernet-backboard/OpsNetwork';
import { OpsCompliance } from '@/plugins/supernet-backboard/OpsCompliance';
import { OpsLicenses } from '@/plugins/supernet-backboard/OpsLicenses';
import { OpsLogs } from '@/plugins/supernet-backboard/OpsLogs';
const deviceStoreKey = 'mock.devices';
const getDevices = (): any[] => {
  try { return JSON.parse(localStorage.getItem(deviceStoreKey) || '[]'); }
  catch { return []; }
};
const setDevices = (arr: any[]) => localStorage.setItem(deviceStoreKey, JSON.stringify(arr));

const mockHost = {
  version: '1.0.0',
  runtime: {
    invoke: async (command: string, payload?: any) => {
      switch (command) {
        case 'device.list': {
          return getDevices(); // ARRAY, as required by UI
        }
        case 'device.enroll': {
          const { fp, name, role } = payload || {};
          const now = new Date().toISOString();
          const arr = getDevices();
          const dev = {
            fp, name, role,                   // 'edge' | 'gateway' | 'sensor' | 'compute'
            online: false,
            lastHeartbeat: null,
            enrolledAt: now,
            pubkey: undefined,
          };
          setDevices([...arr, dev]);
          return { success: true };
        }
        case 'wifi.scan': {
          return { ssids: ['FabricNet'], success: true };
        }
        default:
          return { success: true };
      }
    }
  },
  git: { read: async () => '{}', write: async () => {}, exists: async () => false },
  licenses: { list: async () => [] },
  provenance: { emit: async () => {} },
  security: { getCRL: async () => ({ revoked: [], updated_at: new Date().toISOString() }) },
  permissions: async () => []
};
const deviceStoreKey = 'mock.devices';
const getDevices = (): any[] => {
  try { return JSON.parse(localStorage.getItem(deviceStoreKey) || '[]'); }
  catch { return []; }
};
const setDevices = (arr: any[]) => localStorage.setItem(deviceStoreKey, JSON.stringify(arr));



export const FabricDashboard: React.FC = () => {
  const [pluginHost, setPluginHost] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadPlugins();
  }, []);

  const loadPlugins = async () => {
    try {
      const pluginManager = new PluginManager();
      const loadedPlugins = await pluginManager.loadPlugins();
      
      // Create a mock host for demo
      
const\ setDevices\ =\ \(arr:\ any\[]\)\ =>\ localStorage\.setItem\(deviceStoreKey,\ JSON\.stringify\(arr\)\);
