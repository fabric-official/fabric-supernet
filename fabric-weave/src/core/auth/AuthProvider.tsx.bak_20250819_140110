import React from "react";

type User = { id: string; email: string };
type Profile = { id: string; user_id: string; email: string; role?: string; permissions?: string[]; full_name?: string };

type Ctx = {
  user: User | null;
  profile: Profile | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signUp: (email: string, password: string) => Promise<void>;
  signOut: () => void;
};
const AuthContext = React.createContext<Ctx>({
  user: null,
  profile: null,
  loading: true,
  signIn: async () => {},
  signUp: async () => {},
  signOut: () => {},
});

const API_BASE = (import.meta as any).env?.VITE_API_BASE || "";

function getToken() { return localStorage.getItem("token") || ""; }
function setSession(token: string, email: string) {
  localStorage.setItem("token", token);
  localStorage.setItem("email", email);
}
function clearSession() {
  localStorage.removeItem("token");
  localStorage.removeItem("email");
}

async function fetchMe(): Promise<Profile | null> {
  const token = getToken();
  const headers: Record<string, string> = {
    Accept: "application/json",
    "Content-Type": "application/json",
  };
  if (token) headers.Authorization = `Bearer ${token}`;
  try {
    const r = await fetch(`${API_BASE}/api/auth/me`, {
      method: "GET",
      headers,
      credentials: "include",
    });
    if (!r.ok) return null;
    return (await r.json()) as Profile;
  } catch {
    return null;
  }
}

async function httpJson<T>(path: string, body: any): Promise<T> {
  const r = await fetch(`${API_BASE}${path}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    credentials: "include",
    body: JSON.stringify(body),
  });
  if (!r.ok) throw new Error(String(r.status));
  return (await r.json()) as T;
}

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = React.useState<User | null>(null);
  const [profile, setProfile] = React.useState<Profile | null>(null);
  const [loading, setLoading] = React.useState(true);

  const load = React.useCallback(async () => {
    const me = await fetchMe();
    if (me) {
      setProfile(me);
      setUser({ id: String(me.id), email: me.email });
    } else {
      setProfile(null);
      setUser(null);
    }
  }, []);

  React.useEffect(() => {
    load().finally(() => setLoading(false));
  }, [load]);

  const signIn = async (email: string, password: string) => {
    const res = await httpJson<{ id: string; email: string; token: string }>(
      "/api/auth/login",
      { email, password }
    );
    setSession(res.token, res.email);
    await load();
  };

  const signUp = async (email: string, password: string) => {
    const res = await httpJson<{ id: string; email: string; token: string }>(
      "/api/auth/register",
      { email, password }
    );
    setSession(res.token, res.email);
    await load();
  };

  const signOut = () => {
    clearSession();
    setUser(null);
    setProfile(null);
  };

  return (
    <AuthContext.Provider value={{ user, profile, loading, signIn, signUp, signOut }}>
      {children}
    </AuthContext.Provider>
  );
}

export const useAuth = () => React.useContext(AuthContext);
