import * as React from "react";

type User = { id: string; email: string };
type Profile = {
  id: string; user_id: string; email: string;
  role?: string; permissions?: string[]; full_name?: string;
};

const BYPASS = String(import.meta.env.VITE_BYPASS_AUTH || "") === "1";
const BYPASS_ROLE = (import.meta.env.VITE_BYPASS_ROLE as string) || "admin";

type Ctx = {
  user: User | null;
  profile: Profile | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signUp: (email: string, password: string) => Promise<void>;
  signOut: () => void;
};
const AuthContext = React.createContext<Ctx>({
  user: null, profile: null, loading: true,
  async signIn() {}, async signUp() {}, signOut() {}
});

function getToken(){ return localStorage.getItem("token"); }
function setSession(tok: string, email: string){ localStorage.setItem("token", tok); localStorage.setItem("email", email); }
function clearSession(){ localStorage.removeItem("token"); localStorage.removeItem("email"); }

async function fetchMe(token: string | null){
  try{
    const r = await fetch("/api/auth/me", {
      method:"GET",
      credentials:"include",
      headers:{
        Accept:"application/json",
        "Content-Type":"application/json",
        ...(token ? { Authorization: `Bearer ${token}` } : {})
      }
    });
    if(!r.ok) return null;
    const body = await r.json() as any;
    if (body?.profile) return body.profile as Profile;
    if (body?.user) {
      const u = body.user as User;
      return { id:String(u.id), user_id:String(u.id), email:u.email, role:"user", permissions:[] };
    }
    return body as Profile;
  } catch { return null; }
}

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = React.useState<User|null>(null);
  const [profile, setProfile] = React.useState<Profile|null>(null);
  const [loading, setLoading] = React.useState(true);

  const loadProfile = React.useCallback(async ()=>{
    if(BYPASS){
      const email = localStorage.getItem("email") || "dev@local";
      const p: Profile = { id:"dev-guest", user_id:"dev-guest", email, role:BYPASS_ROLE, permissions:["*"], full_name:"Developer (Bypass)" };
      setProfile(p);
      setUser({ id:p.id, email:p.email });
      return;
    }
    const me = await fetchMe(getToken());
    if(me){ setProfile(me); setUser({ id: me.id, email: me.email }); } else { setProfile(null); }
  },[]);

  React.useEffect(()=>{
    if(BYPASS){
      const email = localStorage.getItem("email") || "dev@local";
      setUser({ id:"dev-guest", email });
      setProfile({ id:"dev-guest", user_id:"dev-guest", email, role:BYPASS_ROLE, permissions:["*"], full_name:"Developer (Bypass)" });
      setLoading(false);
      return;
    }
    loadProfile().finally(()=>setLoading(false));
  },[loadProfile]);

  const signIn = async (email: string, password: string)=>{
    if(BYPASS){ setSession("bypass-token", email); setUser({ id:"dev-guest", email }); await loadProfile(); return; }
    const r = await fetch("/api/auth/login", { method:"POST", headers:{ "Content-Type":"application/json" }, body: JSON.stringify({ email, password }) });
    if(!r.ok) throw new Error("login failed");
    const b = await r.json() as { token: string; email?: string };
    setSession(b.token, b.email ?? email);
    await loadProfile();
  };

  const signUp = async (email: string, password: string)=>{
    if(BYPASS){ setSession("bypass-token", email); setUser({ id:"dev-guest", email }); await loadProfile(); return; }
    const r = await fetch("/api/auth/register", { method:"POST", headers:{ "Content-Type":"application/json" }, body: JSON.stringify({ email, password }) });
    if(!r.ok) throw new Error("signup failed");
    const b = await r.json() as { token: string; email?: string };
    setSession(b.token, b.email ?? email);
    await loadProfile();
  };

  const signOut = ()=>{ clearSession(); setUser(null); setProfile(null); };

  return (
    <AuthContext.Provider value={{ user, profile, loading, signIn, signUp, signOut }}>
      {children}
    </AuthContext.Provider>
  );
}

export const useAuth = ()=>React.useContext(AuthContext);